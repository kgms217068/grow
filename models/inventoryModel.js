const { promisePool } = require('../db/db');

/*
// inventoryModel.js
exports.createInitialInventory = async (userId) => {
  // Ïòà: item_id 1 = ÎπÑÎ£å
  await promisePool.query(
    `INSERT INTO inventory (user_id, item_id, item_count)
     VALUES (?, 999, 0)`, // ÎπÑÎ£å Ï¥àÍ∏∞Í∞í 0Í∞ú
    [userId]
  );
};
*/
exports.createInitialInventory = async (userId) => {
  // 1. Ïù∏Î≤§ÌÜ†Î¶¨ Î®ºÏ†Ä ÏÉùÏÑ±
  const [result] = await promisePool.query(
    `INSERT INTO inventory (user_id) VALUES (?)`,
    [userId]
  );
  const inventoryId = result.insertId;

  // 2. ÎπÑÎ£å ÌÉÄÏûÖ ID Ï°∞Ìöå
  const [[fertilizerType]] = await promisePool.query(`
    SELECT item_type_id FROM item_type WHERE item_name = 'ÎπÑÎ£å'
  `);

  // 3. ÎπÑÎ£å ÏßÄÍ∏â
  await promisePool.query(`
    INSERT INTO item (inventory_id, item_type_id, item_count)
    VALUES (?, ?, 0)
    ON DUPLICATE KEY UPDATE item_count = item_count + 0
  `, [inventoryId, fertilizerType.item_type_id]);
};


// inventoryModel.js ÏïàÏóê Ï∂îÍ∞Ä
/*
exports.giveDefaultSeedToUser = async (userId) => {
  const [[appleItem]] = await promisePool.query(`
    SELECT i.item_id
    FROM item i
    JOIN item_type it ON i.item_type_id = it.item_type_id
    WHERE it.item_name = "ÏÇ¨Í≥º"
  `);
/*
JOIN item_type t ON i.item_type_id = t.item_type_id
WHERE t.item_name = "ÏÇ¨Í≥º"

  if (!appleItem) throw new Error('‚ùå ÏÇ¨Í≥º item_id ÏóÜÏùå');

  await promisePool.query(`
    INSERT INTO inventory (user_id, item_id, item_count)
    VALUES (?, ?, 1)
    ON DUPLICATE KEY UPDATE item_count = item_count + 1
  `, [userId, appleItem.item_id]);
};

exports.giveDefaultSeedToUser = async (userId) => {
  // 1. Ïú†Ï†ÄÏùò inventory_id Í∞ÄÏ†∏Ïò§Í∏∞
  const [[{ inventory_id }]] = await promisePool.query(`
    SELECT inventory_id FROM inventory WHERE user_id = ?
  `, [userId]);

  // 2. ÏÇ¨Í≥º item_type_id Í∞ÄÏ†∏Ïò§Í∏∞
  const [[appleType]] = await promisePool.query(`
    SELECT item_type_id FROM item_type WHERE item_name = "apple"
  `);

  if (!appleType) throw new Error('‚ùå ÏÇ¨Í≥º item_type_id ÏóÜÏùå');

  // 3. Ìï¥Îãπ inventoryÏóê ÏÇ¨Í≥º ÏïÑÏù¥ÌÖú ÏÇΩÏûÖ (ÏóÜÏúºÎ©¥ ÏÉùÏÑ±, ÏûàÏúºÎ©¥ Í∞úÏàò +1)
  await promisePool.query(`
    INSERT INTO item (inventory_id, item_type_id, item_count)
    VALUES (?, ?, 1)
    ON DUPLICATE KEY UPDATE item_count = item_count + 1
  `, [inventory_id, appleType.item_type_id]);
};
*/
exports.giveRandomSeedToUser = async (userId) => {
  // 1. Ïú†Ï†ÄÏùò inventory_id Í∞ÄÏ†∏Ïò§Í∏∞
  const [[{ inventory_id }]] = await promisePool.query(`
    SELECT inventory_id FROM inventory WHERE user_id = ?
  `, [userId]);

  // 2. Ïú†Ï†ÄÍ∞Ä Î≥¥Ïú† Ï§ëÏù∏ Ïî®Ïïó Î™©Î°ù Ï°∞Ìöå
  const [userSeeds] = await promisePool.query(`
    SELECT it.item_name
    FROM item i
    JOIN item_type it ON i.item_type_id = it.item_type_id
    WHERE i.inventory_id = ? AND it.item_name IN ('apple', 'orange', 'peach')
  `, [inventory_id]);

  const ownedSeedNames = userSeeds.map(row => row.item_name);

  // 3. Ï†ÑÏ≤¥ ÏòµÏÖòÏóêÏÑú Ïù¥ÎØ∏ Î∞õÏùÄ Í≤É Ï†úÏô∏
  const seedOptions = ['apple', 'orange', 'peach'];
  const availableSeeds = seedOptions.filter(seed => !ownedSeedNames.includes(seed));

  // ‚úÖ Î™®Îëê ÏÜåÏú†Ìïú Í≤ΩÏö∞Îäî ÏïÑÎ¨¥Í±∞ÎÇò ÏßÄÍ∏â (Í∏∞Î≥∏Í∞í)
  const candidates = availableSeeds.length > 0 ? availableSeeds : seedOptions;

  // 4. ÎûúÎç§ ÏÑ†ÌÉù
  const selectedSeed = candidates[Math.floor(Math.random() * candidates.length)];

  // 5. ÏÑ†ÌÉùÎêú Í≥ºÏùºÏùò item_type_id Í∞ÄÏ†∏Ïò§Í∏∞
  const [[seedType]] = await promisePool.query(`
    SELECT item_type_id FROM item_type WHERE item_name = ?
  `, [selectedSeed]);

  if (!seedType) throw new Error(`‚ùå ${selectedSeed} item_type_id ÏóÜÏùå`);

  // 6. Ïù∏Î≤§ÌÜ†Î¶¨Ïóê ÏÇΩÏûÖ ÎòêÎäî Í∞úÏàò +1
  await promisePool.query(`
    INSERT INTO item (inventory_id, item_type_id, item_count)
    VALUES (?, ?, 1)
    ON DUPLICATE KEY UPDATE item_count = item_count + 1
  `, [inventory_id, seedType.item_type_id]);

  return selectedSeed;
};

/*
exports.getInventoryByUser = async (userId) => {
  const [rows] = await promisePool.query(`
    SELECT 
      i.*, 
      it.item_name AS name,
      img.image_path AS image_url,
      it.category
    FROM inventory i
    JOIN item it ON i.item_id = it.item_id
    LEFT JOIN item_image img ON it.item_name = img.item_name
    WHERE i.user_id = ?
  `, [userId]);


  return rows;
};
*/
exports.getInventoryByUser = async (userId) => {
  const [[inventoryRow]] = await promisePool.query(`
    SELECT inventory_id FROM inventory WHERE user_id = ?
  `, [userId]);

  const inventoryId = inventoryRow.inventory_id;

  const [rows] = await promisePool.query(`
    SELECT 
      i.item_id,
      i.item_count,
      it.item_name,
      it.category,
      img.image_path,
      img.description
    FROM item i
    JOIN item_type it ON i.item_type_id = it.item_type_id
    LEFT JOIN item_image img ON it.item_name = img.item_name
    WHERE i.inventory_id = ?
  `, [inventoryId]);
  
  //console.log("üîç Ïù∏Î≤§ÌÜ†Î¶¨ Ï°∞Ìöå Í≤∞Í≥º:", rows);

  return rows;
};

